Starting Fixed Adversarial Watermarking Training...
Loading models...
Loading C1 model...
/teamspace/studios/this_studio/unetMRI/src/watermarking/MRI_Watermark_Embedding_CYCLES_FIXED_ADVERSARIAL.py:252: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(C1_PATH, map_location=DEVICE)
/teamspace/studios/this_studio/unetMRI/src/watermarking/MRI_Watermark_Embedding_CYCLES_FIXED_ADVERSARIAL.py:274: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(AE_PATH, map_location=DEVICE)
Starting training...
\n=== EPOCH 1/5 ===
WARMUP STAGE - Training C2 normally
ðŸ”„ Creating dataloader for warmup stage...
ðŸ“¦ Creating dataloader: warmup stage, batch_size=64
Batch 0: C2_loss=2.028, C1_acc=1.000, C2_acc=0.250
Batch 10: C2_loss=1.364, C1_acc=1.000, C2_acc=0.469
Batch 20: C2_loss=1.700, C1_acc=1.000, C2_acc=0.281
Batch 30: C2_loss=1.060, C1_acc=1.000, C2_acc=0.625
Batch 40: C2_loss=0.660, C1_acc=1.000, C2_acc=0.750
Batch 50: C2_loss=1.219, C1_acc=0.984, C2_acc=0.531
Batch 60: C2_loss=1.094, C1_acc=1.000, C2_acc=0.516
Batch 70: C2_loss=0.792, C1_acc=1.000, C2_acc=0.672
Batch 80: C2_loss=0.872, C1_acc=1.000, C2_acc=0.641
Epoch 1 Summary:
  Stage: warmup
  C1 Performance: clean=0.998
  C2 Performance: clean=0.531
\n=== EPOCH 2/5 ===
WARMUP STAGE - Training C2 normally
Batch 0: C2_loss=0.977, C1_acc=1.000, C2_acc=0.547
Batch 10: C2_loss=0.913, C1_acc=1.000, C2_acc=0.625
Batch 20: C2_loss=0.946, C1_acc=1.000, C2_acc=0.547
Batch 30: C2_loss=0.750, C1_acc=1.000, C2_acc=0.641
Batch 40: C2_loss=4.998, C1_acc=1.000, C2_acc=0.703
Batch 50: C2_loss=0.678, C1_acc=1.000, C2_acc=0.750
Batch 60: C2_loss=0.655, C1_acc=0.984, C2_acc=0.750
Batch 70: C2_loss=0.724, C1_acc=1.000, C2_acc=0.750
Batch 80: C2_loss=0.661, C1_acc=1.000, C2_acc=0.781
Epoch 2 Summary:
  Stage: warmup
  C1 Performance: clean=0.998
  C2 Performance: clean=0.689
\n=== EPOCH 3/5 ===
ADVERSARIAL STAGE - C2 vs Generator
ðŸ”„ Creating dataloader for adversarial stage...
ðŸ“¦ Creating dataloader: adversarial stage, batch_size=16
Batch 0: C2_loss=5.049, Gen_loss=7.115
  C1: clean=1.000, wm=1.000
  C2: clean=0.750, wm=0.438
  Quality: L1=0.0004
  Losses: Misclassify=0.579, Detection=0.828, Fooling=8.894
Batch 10: C2_loss=3.707, Gen_loss=6.436
  C1: clean=1.000, wm=1.000
  C2: clean=0.812, wm=0.812
  Quality: L1=0.0004
  Losses: Misclassify=0.532, Detection=0.528, Fooling=8.045
Batch 20: C2_loss=2.066, Gen_loss=6.024
  C1: clean=1.000, wm=1.000
  C2: clean=0.875, wm=0.875
  Quality: L1=0.0005
  Losses: Misclassify=0.364, Detection=0.244, Fooling=7.530
Batch 30: C2_loss=5.719, Gen_loss=7.810
  C1: clean=1.000, wm=1.000
  C2: clean=0.812, wm=0.750
  Quality: L1=0.0005
  Losses: Misclassify=0.200, Detection=1.280, Fooling=9.762
Batch 40: C2_loss=2.230, Gen_loss=5.671
  C1: clean=1.000, wm=1.000
  C2: clean=0.812, wm=0.938
  Quality: L1=0.0005
  Losses: Misclassify=0.261, Detection=0.362, Fooling=7.089
Batch 50: C2_loss=3.646, Gen_loss=6.775
  C1: clean=1.000, wm=1.000
  C2: clean=0.812, wm=0.812
  Quality: L1=0.0005
  Losses: Misclassify=0.192, Detection=0.767, Fooling=8.469
Batch 60: C2_loss=7.381, Gen_loss=8.281
  C1: clean=1.000, wm=1.000
  C2: clean=0.750, wm=0.688
  Quality: L1=0.0005
  Losses: Misclassify=0.525, Detection=1.452, Fooling=10.351
Batch 70: C2_loss=3.549, Gen_loss=10.459
  C1: clean=1.000, wm=1.000
  C2: clean=0.625, wm=0.875
  Quality: L1=0.0006
  Losses: Misclassify=0.466, Detection=0.538, Fooling=13.074
Batch 80: C2_loss=3.833, Gen_loss=7.193
  C1: clean=1.000, wm=1.000
  C2: clean=0.688, wm=0.750
  Quality: L1=0.0008
  Losses: Misclassify=0.154, Detection=0.842, Fooling=8.991
Batch 90: C2_loss=7.382, Gen_loss=7.450
  C1: clean=1.000, wm=1.000
  C2: clean=0.688, wm=0.625
  Quality: L1=0.0009
  Losses: Misclassify=0.380, Detection=1.560, Fooling=9.313
Batch 100: C2_loss=6.460, Gen_loss=7.179
  C1: clean=1.000, wm=1.000
  C2: clean=0.688, wm=0.750
  Quality: L1=0.0012
  Losses: Misclassify=0.336, Detection=1.363, Fooling=8.973
